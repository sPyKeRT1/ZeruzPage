--------------------------------------------------------
--  File created - martes-diciembre-10-2024   
--------------------------------------------------------
DROP SEQUENCE "USUARIO"."ENCUESTA_SEQ";
DROP SEQUENCE "USUARIO"."PEDIDO_SEQ";
DROP TABLE "USUARIO"."CATEGORIA" cascade constraints;
DROP TABLE "USUARIO"."ENCUESTA" cascade constraints;
DROP TABLE "USUARIO"."METODO_PAGO" cascade constraints;
DROP TABLE "USUARIO"."PEDIDO" cascade constraints;
DROP TABLE "USUARIO"."PRODUCTO" cascade constraints;
DROP TABLE "USUARIO"."USUARIO" cascade constraints;
DROP PROCEDURE "USUARIO"."DESCONTAR_STOCK";
DROP PROCEDURE "USUARIO"."ELIMINAR_PRODUCTO";
DROP PROCEDURE "USUARIO"."INICIAR_SESION";
DROP PROCEDURE "USUARIO"."INSERTAR_PRODUCTO";
DROP PROCEDURE "USUARIO"."INSERTAR_USUARIO";
DROP PROCEDURE "USUARIO"."MODIFICAR_PRODUCTO";
DROP PROCEDURE "USUARIO"."REALIZAR_PEDIDO";
DROP PROCEDURE "USUARIO"."REGISTRAR_ENCUESTA";
DROP FUNCTION "USUARIO"."OBTENER_CONTRASENA";
DROP FUNCTION "USUARIO"."VERIFICAR_PRODUCTO";
DROP FUNCTION "USUARIO"."VERIFICAR_PRODUCTO_MODIFICAR";
DROP FUNCTION "USUARIO"."VERIFICAR_USUARIO";
--------------------------------------------------------
--  DDL for Sequence ENCUESTA_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "USUARIO"."ENCUESTA_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence PEDIDO_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "USUARIO"."PEDIDO_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Table CATEGORIA
--------------------------------------------------------

  CREATE TABLE "USUARIO"."CATEGORIA" 
   (	"CODIGO" NUMBER, 
	"NOMBRE" VARCHAR2(20 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table ENCUESTA
--------------------------------------------------------

  CREATE TABLE "USUARIO"."ENCUESTA" 
   (	"CODIGO_PEDIDO" NUMBER, 
	"RATING" NUMBER, 
	"COMENTARIOS" VARCHAR2(255 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table METODO_PAGO
--------------------------------------------------------

  CREATE TABLE "USUARIO"."METODO_PAGO" 
   (	"CODIGO" NUMBER, 
	"NOMBRE" VARCHAR2(50 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table PEDIDO
--------------------------------------------------------

  CREATE TABLE "USUARIO"."PEDIDO" 
   (	"CODIGO" NUMBER, 
	"RUT_USUARIO" NUMBER, 
	"CODIGO_PRODUCTO" NUMBER, 
	"CANTIDAD" NUMBER, 
	"METODO_PAGO" NUMBER, 
	"DIRECCION_ENVIO" VARCHAR2(255 BYTE), 
	"FECHA_ESTIMADA" DATE, 
	"ESTADO" VARCHAR2(20 BYTE)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table PRODUCTO
--------------------------------------------------------

  CREATE TABLE "USUARIO"."PRODUCTO" 
   (	"CODIGO" NUMBER, 
	"NOMBRE" VARCHAR2(40 BYTE), 
	"PRECIO" NUMBER, 
	"CODIGO_CATEGORIA" NUMBER, 
	"STOCK" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table USUARIO
--------------------------------------------------------

  CREATE TABLE "USUARIO"."USUARIO" 
   (	"RUT" NUMBER(10,0), 
	"NOMBRE" VARCHAR2(100 BYTE), 
	"APELLIDOS" VARCHAR2(100 BYTE), 
	"CONTRASENA" VARCHAR2(100 BYTE), 
	"ROL" NUMBER(1,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
REM INSERTING into USUARIO.CATEGORIA
SET DEFINE OFF;
Insert into USUARIO.CATEGORIA (CODIGO,NOMBRE) values (1,'FILOSOFIA');
Insert into USUARIO.CATEGORIA (CODIGO,NOMBRE) values (2,'CIENCIAS POLITICAS');
Insert into USUARIO.CATEGORIA (CODIGO,NOMBRE) values (3,'CIENCIAS EXACTAS');
Insert into USUARIO.CATEGORIA (CODIGO,NOMBRE) values (5,'FICCION');
Insert into USUARIO.CATEGORIA (CODIGO,NOMBRE) values (6,'THRILLER');
Insert into USUARIO.CATEGORIA (CODIGO,NOMBRE) values (7,'BIOGRAFIAS');
Insert into USUARIO.CATEGORIA (CODIGO,NOMBRE) values (8,'HISTORIA');
Insert into USUARIO.CATEGORIA (CODIGO,NOMBRE) values (9,'INFANTILES');
Insert into USUARIO.CATEGORIA (CODIGO,NOMBRE) values (10,'UTOPIAS');
Insert into USUARIO.CATEGORIA (CODIGO,NOMBRE) values (11,'DRAMA');
REM INSERTING into USUARIO.ENCUESTA
SET DEFINE OFF;
Insert into USUARIO.ENCUESTA (CODIGO_PEDIDO,RATING,COMENTARIOS) values (320792,4,'VALE PICO');
Insert into USUARIO.ENCUESTA (CODIGO_PEDIDO,RATING,COMENTARIOS) values (714447,5,null);
Insert into USUARIO.ENCUESTA (CODIGO_PEDIDO,RATING,COMENTARIOS) values (12312,5,'dios mio que buen producto me vengo');
REM INSERTING into USUARIO.METODO_PAGO
SET DEFINE OFF;
Insert into USUARIO.METODO_PAGO (CODIGO,NOMBRE) values (1,'TARJETA DE CREDITO');
Insert into USUARIO.METODO_PAGO (CODIGO,NOMBRE) values (2,'TARJETA DE DEBITO');
Insert into USUARIO.METODO_PAGO (CODIGO,NOMBRE) values (3,'TRANSFERENCIA BANCARIA');
Insert into USUARIO.METODO_PAGO (CODIGO,NOMBRE) values (4,'PAYPAL');
Insert into USUARIO.METODO_PAGO (CODIGO,NOMBRE) values (5,'CRYPTOMONEDA');
REM INSERTING into USUARIO.PEDIDO
SET DEFINE OFF;
REM INSERTING into USUARIO.PRODUCTO
SET DEFINE OFF;
Insert into USUARIO.PRODUCTO (CODIGO,NOMBRE,PRECIO,CODIGO_CATEGORIA,STOCK) values (5,'HARRY POTTER Y EL PERLA AZUL',45000,5,73);
Insert into USUARIO.PRODUCTO (CODIGO,NOMBRE,PRECIO,CODIGO_CATEGORIA,STOCK) values (8,'MOMENTOS ESTELARES DE LA HUMANIDAD',15000,8,80);
Insert into USUARIO.PRODUCTO (CODIGO,NOMBRE,PRECIO,CODIGO_CATEGORIA,STOCK) values (9,'EL PRINCIPITO',5000,9,77);
Insert into USUARIO.PRODUCTO (CODIGO,NOMBRE,PRECIO,CODIGO_CATEGORIA,STOCK) values (11,'INDIGNO DE SER HUMANO',10000,11,80);
REM INSERTING into USUARIO.USUARIO
SET DEFINE OFF;
Insert into USUARIO.USUARIO (RUT,NOMBRE,APELLIDOS,CONTRASENA,ROL) values (11111,'Administrador','Principal','admin123',2);
Insert into USUARIO.USUARIO (RUT,NOMBRE,APELLIDOS,CONTRASENA,ROL) values (123,'123','123','123',1);
--------------------------------------------------------
--  DDL for Index PK_CATEGORIA
--------------------------------------------------------

  CREATE UNIQUE INDEX "USUARIO"."PK_CATEGORIA" ON "USUARIO"."CATEGORIA" ("CODIGO") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index PK_ENCUESTA
--------------------------------------------------------

  CREATE UNIQUE INDEX "USUARIO"."PK_ENCUESTA" ON "USUARIO"."ENCUESTA" ("CODIGO_PEDIDO") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index PK_METODO_PAGO
--------------------------------------------------------

  CREATE UNIQUE INDEX "USUARIO"."PK_METODO_PAGO" ON "USUARIO"."METODO_PAGO" ("CODIGO") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index PK_PEDIDO
--------------------------------------------------------

  CREATE UNIQUE INDEX "USUARIO"."PK_PEDIDO" ON "USUARIO"."PEDIDO" ("CODIGO") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index PK_PRODUCTO
--------------------------------------------------------

  CREATE UNIQUE INDEX "USUARIO"."PK_PRODUCTO" ON "USUARIO"."PRODUCTO" ("CODIGO") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index SYS_C008353
--------------------------------------------------------

  CREATE UNIQUE INDEX "USUARIO"."SYS_C008353" ON "USUARIO"."USUARIO" ("RUT") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index PK_CATEGORIA
--------------------------------------------------------

  CREATE UNIQUE INDEX "USUARIO"."PK_CATEGORIA" ON "USUARIO"."CATEGORIA" ("CODIGO") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index PK_ENCUESTA
--------------------------------------------------------

  CREATE UNIQUE INDEX "USUARIO"."PK_ENCUESTA" ON "USUARIO"."ENCUESTA" ("CODIGO_PEDIDO") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index PK_METODO_PAGO
--------------------------------------------------------

  CREATE UNIQUE INDEX "USUARIO"."PK_METODO_PAGO" ON "USUARIO"."METODO_PAGO" ("CODIGO") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index PK_PEDIDO
--------------------------------------------------------

  CREATE UNIQUE INDEX "USUARIO"."PK_PEDIDO" ON "USUARIO"."PEDIDO" ("CODIGO") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index PK_PRODUCTO
--------------------------------------------------------

  CREATE UNIQUE INDEX "USUARIO"."PK_PRODUCTO" ON "USUARIO"."PRODUCTO" ("CODIGO") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index SYS_C008353
--------------------------------------------------------

  CREATE UNIQUE INDEX "USUARIO"."SYS_C008353" ON "USUARIO"."USUARIO" ("RUT") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Trigger MAYUSCULA_PRODUCTO
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "USUARIO"."MAYUSCULA_PRODUCTO" 
BEFORE INSERT ON PRODUCTO
FOR EACH ROW
DECLARE
BEGIN
    :NEW.NOMBRE := UPPER(:NEW.NOMBRE);
END;

/
ALTER TRIGGER "USUARIO"."MAYUSCULA_PRODUCTO" ENABLE;
--------------------------------------------------------
--  DDL for Trigger MAYUSCULA_PRODUCTO
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "USUARIO"."MAYUSCULA_PRODUCTO" 
BEFORE INSERT ON PRODUCTO
FOR EACH ROW
DECLARE
BEGIN
    :NEW.NOMBRE := UPPER(:NEW.NOMBRE);
END;

/
ALTER TRIGGER "USUARIO"."MAYUSCULA_PRODUCTO" ENABLE;
--------------------------------------------------------
--  DDL for Procedure DESCONTAR_STOCK
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "USUARIO"."DESCONTAR_STOCK" (
    p_codigo_producto IN NUMBER,
    p_cantidad IN NUMBER,
    p_resultado OUT VARCHAR2,
    p_mensaje OUT VARCHAR2
)
AS
BEGIN
    -- Intentar descontar la cantidad del stock
    UPDATE PRODUCTO SET STOCK = STOCK - p_cantidad WHERE CODIGO = p_codigo_producto;

    -- Verificar si se actualizó al menos una fila
    IF SQL%ROWCOUNT > 0 THEN
        p_resultado := 'TRUE';
        p_mensaje := 'Stock actualizado correctamente';
        COMMIT; -- Confirmar la transacción
    ELSE
        p_resultado := 'FALSE';
        p_mensaje := 'Error al actualizar el stock';
        ROLLBACK; -- Deshacer cualquier cambio
    END IF;
END DESCONTAR_STOCK;

/
--------------------------------------------------------
--  DDL for Procedure ELIMINAR_PRODUCTO
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "USUARIO"."ELIMINAR_PRODUCTO" (
    p_codigo IN NUMBER,
    p_resultado OUT VARCHAR2,
    p_mensaje OUT VARCHAR2
) AS
BEGIN
    DELETE FROM PRODUCTO
    WHERE CODIGO = p_codigo;
    p_resultado := 'TRUE';
    p_mensaje := 'Producto eliminado con éxito.';
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        p_resultado := 'FALSE';
        p_mensaje := 'Error al eliminar producto.';
        ROLLBACK;
END;

/
--------------------------------------------------------
--  DDL for Procedure INICIAR_SESION
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "USUARIO"."INICIAR_SESION" (
    p_rut IN NUMBER,
    p_contrasena IN VARCHAR2,
    p_resultado OUT VARCHAR2,
    p_mensaje OUT VARCHAR2,
    p_rol OUT NUMBER  -- Agregar parámetro de salida para el rol
) AS
    v_rol NUMBER;
BEGIN
    -- Verificar credenciales
    SELECT ROL INTO v_rol
    FROM USUARIO
    WHERE RUT = p_rut AND CONTRASENA = p_contrasena;

    p_resultado := 'TRUE';
    p_mensaje := 'Inicio de sesión exitoso.';
    p_rol := v_rol;  -- Asignar el rol al parámetro de salida

EXCEPTION
    WHEN NO_DATA_FOUND THEN
        p_resultado := 'FALSE';
        p_mensaje := 'Credenciales incorrectas.';
        p_rol := NULL;  -- Asignar NULL al rol en caso de error
    WHEN OTHERS THEN
        p_resultado := 'FALSE';
        p_mensaje := 'Error al iniciar sesión.';
        p_rol := NULL;  -- Asignar NULL al rol en caso de error
END;

/
--------------------------------------------------------
--  DDL for Procedure INSERTAR_PRODUCTO
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "USUARIO"."INSERTAR_PRODUCTO" (
    p_codigo IN NUMBER,
    p_nombre IN VARCHAR2,
    p_precio IN NUMBER,
    p_categoria IN NUMBER,
    p_stock IN NUMBER,
    p_resultado OUT VARCHAR2,
    p_mensaje OUT VARCHAR2
) AS
BEGIN
    INSERT INTO PRODUCTO (CODIGO, NOMBRE, PRECIO, CODIGO_CATEGORIA, STOCK)
    VALUES (p_codigo, p_nombre, p_precio, p_categoria, p_stock);
    p_resultado := 'TRUE';
    p_mensaje := 'Producto registrado con éxito.';
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        p_resultado := 'FALSE';
        p_mensaje := 'Error al registrar producto.';
        ROLLBACK;
END;

/
--------------------------------------------------------
--  DDL for Procedure INSERTAR_USUARIO
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "USUARIO"."INSERTAR_USUARIO" (
    p_rut IN NUMBER,
    p_nombre IN VARCHAR2,
    p_apellidos IN VARCHAR2,
    p_contrasena IN VARCHAR2,
    p_rol IN NUMBER,
    p_resultado OUT VARCHAR2,
    p_mensaje OUT VARCHAR2
) AS
    v_count NUMBER; -- Variable para contar si el usuario existe
BEGIN
    -- Verificar si el usuario ya existe
    SELECT COUNT(*)
    INTO v_count
    FROM USUARIO
    WHERE RUT = p_rut;

    IF v_count > 0 THEN
        p_resultado := 'FALSE';
        p_mensaje := 'El usuario ya existe.';
    ELSE
        INSERT INTO USUARIO (RUT, NOMBRE, APELLIDOS, CONTRASENA, ROL)
        VALUES (p_rut, p_nombre, p_apellidos, p_contrasena, p_rol);

        COMMIT; -- Confirmar la transacción

        p_resultado := 'TRUE';
        p_mensaje := 'Usuario registrado con éxito.';
    END IF;

EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK; -- Revertir los cambios en caso de error
        p_resultado := 'FALSE';
        p_mensaje := 'Error al registrar usuario: ' || SQLERRM;
END;

/
--------------------------------------------------------
--  DDL for Procedure MODIFICAR_PRODUCTO
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "USUARIO"."MODIFICAR_PRODUCTO" (
    CODIGO_P IN PRODUCTO.CODIGO%TYPE,
    NOMBRE_P IN PRODUCTO.NOMBRE%TYPE,
    PRECIO_P IN PRODUCTO.PRECIO%TYPE,
    STOCK_P IN PRODUCTO.STOCK%TYPE,
    RESULTADO OUT VARCHAR2,
    MENSAJE OUT VARCHAR2
)
IS
    STOCK_INCORRECTO EXCEPTION;
    PRECIO_INCORRECTO EXCEPTION;
    PRODUCTO_NO_EXISTE EXCEPTION;
BEGIN
    LOCK TABLE PRODUCTO IN ROW EXCLUSIVE MODE;
    
    -- Verificar primero si el producto existe
    IF NOT VERIFICAR_PRODUCTO(CODIGO_P) THEN
        RAISE PRODUCTO_NO_EXISTE;
    END IF;
    
    IF PRECIO_P > 0 THEN
        IF STOCK_P > 0 THEN
            -- Modificar el producto
            UPDATE PRODUCTO 
            SET NOMBRE = NOMBRE_P, 
                PRECIO = PRECIO_P, 
                STOCK = STOCK_P
            WHERE CODIGO = CODIGO_P;
            
            RESULTADO := 'TRUE';
            MENSAJE := 'EL PRODUCTO SE HA MODIFICADO EXITOSAMENTE';
            COMMIT;
        ELSE
            RAISE STOCK_INCORRECTO;
        END IF;
    ELSE
        RAISE PRECIO_INCORRECTO;
    END IF;
    
EXCEPTION
    WHEN PRODUCTO_NO_EXISTE THEN
        RESULTADO := 'FALSE';
        MENSAJE := 'EL PRODUCTO QUE INTENTA MODIFICAR NO EXISTE';
        ROLLBACK;
    WHEN STOCK_INCORRECTO THEN
        RESULTADO := 'FALSE';
        MENSAJE := 'EL STOCK DEBE TENER UN VALOR MAYOR A 0';
        ROLLBACK;
    WHEN PRECIO_INCORRECTO THEN
        RESULTADO := 'FALSE';
        MENSAJE := 'EL PRECIO DEBE TENER UN VALOR MAYOR A 0';
        ROLLBACK;
    WHEN OTHERS THEN
        RESULTADO := 'FALSE';
        MENSAJE := 'ERROR NO CONTROLADO: '||SQLERRM;
        ROLLBACK;
END;

/
--------------------------------------------------------
--  DDL for Procedure REALIZAR_PEDIDO
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "USUARIO"."REALIZAR_PEDIDO" (
    RUT_U IN PEDIDO.RUT_USUARIO%TYPE,
    CODIGO_P IN PEDIDO.CODIGO_PRODUCTO%TYPE,
    CANTIDAD_P IN PEDIDO.CANTIDAD%TYPE,
    METODO_P IN PEDIDO.METODO_PAGO%TYPE,
    DIRECCION IN PEDIDO.DIRECCION_ENVIO%TYPE,
    RESULTADO OUT VARCHAR2,
    MENSAJE OUT VARCHAR2
)
IS
    STOCK_DISPONIBLE NUMBER;
BEGIN
    SELECT STOCK INTO STOCK_DISPONIBLE FROM PRODUCTO WHERE CODIGO = CODIGO_P;
    IF STOCK_DISPONIBLE >= CANTIDAD_P THEN
        INSERT INTO PEDIDO (CODIGO, RUT_USUARIO, CODIGO_PRODUCTO, CANTIDAD, METODO_PAGO, DIRECCION_ENVIO, FECHA_ESTIMADA, ESTADO)
        VALUES (PEDIDO_SEQ.NEXTVAL, RUT_U, CODIGO_P, CANTIDAD_P, METODO_P, DIRECCION, SYSDATE + 5, 'Pendiente');
        UPDATE PRODUCTO SET STOCK = STOCK - CANTIDAD_P WHERE CODIGO = CODIGO_P;
        RESULTADO := 'TRUE';
        MENSAJE := 'PEDIDO REALIZADO EXITOSAMENTE';
        COMMIT;
    ELSE
        RESULTADO := 'FALSE';
        MENSAJE := 'STOCK INSUFICIENTE';
    END IF;
EXCEPTION
    WHEN OTHERS THEN
        RESULTADO := 'FALSE';
        MENSAJE := 'ERROR NO CONTROLADO: ' || SQLERRM;
        ROLLBACK;
END;

/
--------------------------------------------------------
--  DDL for Procedure REGISTRAR_ENCUESTA
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "USUARIO"."REGISTRAR_ENCUESTA" (
    CODIGO_PEDIDO IN ENCUESTA.CODIGO_PEDIDO%TYPE,
    RATING IN ENCUESTA.RATING%TYPE,
    COMENTARIOS IN ENCUESTA.COMENTARIOS%TYPE,
    RESULTADO OUT VARCHAR2,
    MENSAJE OUT VARCHAR2
)
IS
BEGIN
    INSERT INTO ENCUESTA (CODIGO_PEDIDO, RATING, COMENTARIOS)
    VALUES (CODIGO_PEDIDO, RATING, COMENTARIOS);
    RESULTADO := 'TRUE';
    MENSAJE := 'ENCUESTA REGISTRADA EXITOSAMENTE';
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        RESULTADO := 'FALSE';
        MENSAJE := 'ERROR NO CONTROLADO: ' || SQLERRM;
        ROLLBACK;
END;

/
--------------------------------------------------------
--  DDL for Function OBTENER_CONTRASENA
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE FUNCTION "USUARIO"."OBTENER_CONTRASENA" (
    RUT_U IN USUARIO.RUT%TYPE
)RETURN VARCHAR2
IS
    CONTRASENA_ALMACENADA VARCHAR2(100);
BEGIN
    SELECT CONTRASENA INTO CONTRASENA_ALMACENADA
    FROM USUARIO 
    WHERE RUT = RUT_U;
    RETURN CONTRASENA_ALMACENADA;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RETURN 'FALSE';
    WHEN OTHERS THEN
        RETURN 'FALSE';
END;

/
--------------------------------------------------------
--  DDL for Function VERIFICAR_PRODUCTO
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE FUNCTION "USUARIO"."VERIFICAR_PRODUCTO" (
    CODIGO_P IN PRODUCTO.CODIGO%TYPE
)RETURN BOOLEAN
IS
    CONTADOR NUMBER;
BEGIN
    SELECT COUNT(*) INTO CONTADOR
    FROM PRODUCTO
    WHERE CODIGO = CODIGO_P;
    IF CONTADOR > 0 THEN
        RETURN TRUE;
    ELSE
        RETURN FALSE;
    END IF;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RETURN FALSE;
    WHEN OTHERS THEN
        RETURN FALSE;
END;

/
--------------------------------------------------------
--  DDL for Function VERIFICAR_PRODUCTO_MODIFICAR
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE FUNCTION "USUARIO"."VERIFICAR_PRODUCTO_MODIFICAR" (
    p_codigo IN PRODUCTO.CODIGO%TYPE
) RETURN BOOLEAN IS
    v_count NUMBER;
BEGIN
    SELECT COUNT(*)
    INTO v_count
    FROM PRODUCTO
    WHERE CODIGO = p_codigo;

    RETURN v_count > 0; -- Retorna TRUE si existe, FALSE si no.
EXCEPTION
    WHEN OTHERS THEN
        RETURN FALSE; -- Devuelve FALSE en caso de error.
END;

/
--------------------------------------------------------
--  DDL for Function VERIFICAR_USUARIO
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE FUNCTION "USUARIO"."VERIFICAR_USUARIO" (
    RUT_U IN USUARIO.RUT%TYPE
)RETURN BOOLEAN
IS
    CONTADOR NUMBER;
BEGIN
    SELECT COUNT(*) INTO CONTADOR
    FROM USUARIO 
    WHERE RUT = RUT_U;
    IF CONTADOR > 0 THEN
        RETURN TRUE;
    ELSE
        RETURN FALSE;
    END IF;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RETURN FALSE;
    WHEN OTHERS THEN
        RETURN FALSE;
END;

/
--------------------------------------------------------
--  Constraints for Table CATEGORIA
--------------------------------------------------------

  ALTER TABLE "USUARIO"."CATEGORIA" ADD CONSTRAINT "PK_CATEGORIA" PRIMARY KEY ("CODIGO")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table ENCUESTA
--------------------------------------------------------

  ALTER TABLE "USUARIO"."ENCUESTA" ADD CONSTRAINT "PK_ENCUESTA" PRIMARY KEY ("CODIGO_PEDIDO")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table METODO_PAGO
--------------------------------------------------------

  ALTER TABLE "USUARIO"."METODO_PAGO" ADD CONSTRAINT "PK_METODO_PAGO" PRIMARY KEY ("CODIGO")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table PEDIDO
--------------------------------------------------------

  ALTER TABLE "USUARIO"."PEDIDO" ADD CONSTRAINT "PK_PEDIDO" PRIMARY KEY ("CODIGO")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table PRODUCTO
--------------------------------------------------------

  ALTER TABLE "USUARIO"."PRODUCTO" ADD CONSTRAINT "PK_PRODUCTO" PRIMARY KEY ("CODIGO")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table USUARIO
--------------------------------------------------------

  ALTER TABLE "USUARIO"."USUARIO" MODIFY ("NOMBRE" NOT NULL ENABLE);
  ALTER TABLE "USUARIO"."USUARIO" MODIFY ("APELLIDOS" NOT NULL ENABLE);
  ALTER TABLE "USUARIO"."USUARIO" MODIFY ("CONTRASENA" NOT NULL ENABLE);
  ALTER TABLE "USUARIO"."USUARIO" MODIFY ("ROL" NOT NULL ENABLE);
  ALTER TABLE "USUARIO"."USUARIO" ADD PRIMARY KEY ("RUT")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table PEDIDO
--------------------------------------------------------

  ALTER TABLE "USUARIO"."PEDIDO" ADD CONSTRAINT "FK_PEDIDO_PRODUCTO" FOREIGN KEY ("CODIGO_PRODUCTO")
	  REFERENCES "USUARIO"."PRODUCTO" ("CODIGO") ON DELETE CASCADE ENABLE;
  ALTER TABLE "USUARIO"."PEDIDO" ADD CONSTRAINT "FK_PEDIDO_METODO_PAGO" FOREIGN KEY ("METODO_PAGO")
	  REFERENCES "USUARIO"."METODO_PAGO" ("CODIGO") ON DELETE CASCADE ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table PRODUCTO
--------------------------------------------------------

  ALTER TABLE "USUARIO"."PRODUCTO" ADD CONSTRAINT "FK_PRODUCTO_CATEGORIA" FOREIGN KEY ("CODIGO_CATEGORIA")
	  REFERENCES "USUARIO"."CATEGORIA" ("CODIGO") ON DELETE CASCADE ENABLE;
