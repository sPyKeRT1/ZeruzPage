--CREAR UN NUEVO USUARIO EN ORACLE PARA PROBAR ESTE SISTEMA
--EN CONSOLA CONECTARSE COMO SUPERUSUARIO
--CONNECT /AS SYSDBA;
--CREATE USER USSER2 IDENTIFIED BY PROYECTO;
--GRANT ALL PRIVILEGES TO USSER2;


DROP TABLE CATEGORIA;
DROP TABLE USUARIO;
DROP TABLE PRODUCTO;

CREATE TABLE USUARIO(
    RUT NUMBER,
    NOMBRE VARCHAR2(100),
    APELLIDOS VARCHAR2(100),
    CONTRASENA VARCHAR2(100)
);
/
CREATE TABLE CATEGORIA(
    CODIGO NUMBER,
    NOMBRE VARCHAR2(20)
);
/
CREATE TABLE PRODUCTO(
    CODIGO NUMBER,
    NOMBRE VARCHAR2(40),
    PRECIO NUMBER,
    CODIGO_CATEGORIA NUMBER,
    STOCK NUMBER,
    RUT_USUARIO NUMBER
);
-- metodo de pago
CREATE TABLE METODO_PAGO(
    CODIGO NUMBER,
    NOMBRE VARCHAR2(50)
);
/
--  guardar pedidos
CREATE TABLE PEDIDO(
    CODIGO NUMBER,
    RUT_USUARIO NUMBER,
    CODIGO_PRODUCTO NUMBER,
    CANTIDAD NUMBER,
    METODO_PAGO NUMBER,
    DIRECCION_ENVIO VARCHAR2(255),
    FECHA_ESTIMADA DATE,
    ESTADO VARCHAR2(20)
);
/
-- encuestas
CREATE TABLE ENCUESTA(
    CODIGO_PEDIDO NUMBER,
    RATING NUMBER,
    COMENTARIOS VARCHAR2(255)
);
/

/
ALTER TABLE USUARIO ADD CONSTRAINT PK_USUARIO PRIMARY KEY(RUT);
ALTER TABLE CATEGORIA ADD CONSTRAINT PK_CATEGORIA PRIMARY KEY(CODIGO);
ALTER TABLE PRODUCTO ADD CONSTRAINT PK_PRODUCTO PRIMARY KEY(CODIGO);
ALTER TABLE METODO_PAGO ADD CONSTRAINT PK_METODO_PAGO PRIMARY KEY(CODIGO);
ALTER TABLE PEDIDO ADD CONSTRAINT PK_PEDIDO PRIMARY KEY(CODIGO);
ALTER TABLE ENCUESTA ADD CONSTRAINT PK_ENCUESTA PRIMARY KEY(CODIGO_PEDIDO);
/
ALTER TABLE PRODUCTO ADD CONSTRAINT FK_PRODUCTO_CATEGORIA FOREIGN KEY(CODIGO_CATEGORIA) REFERENCES CATEGORIA(CODIGO) ON DELETE CASCADE;
ALTER TABLE PRODUCTO ADD CONSTRAINT FK_PRODUCTO_USUARIO FOREIGN KEY(RUT_USUARIO) REFERENCES USUARIO(RUT) ON DELETE CASCADE;
ALTER TABLE PEDIDO ADD CONSTRAINT FK_PEDIDO_USUARIO FOREIGN KEY(RUT_USUARIO) REFERENCES USUARIO(RUT) ON DELETE CASCADE;
ALTER TABLE PEDIDO ADD CONSTRAINT FK_PEDIDO_PRODUCTO FOREIGN KEY(CODIGO_PRODUCTO) REFERENCES PRODUCTO(CODIGO) ON DELETE CASCADE;
ALTER TABLE PEDIDO ADD CONSTRAINT FK_PEDIDO_METODO_PAGO FOREIGN KEY(METODO_PAGO) REFERENCES METODO_PAGO(CODIGO) ON DELETE CASCADE;
/
INSERT INTO CATEGORIA VALUES(1,'FILOSOF?A');
INSERT INTO CATEGORIA VALUES(2,'CIENCIAS POL?TICAS');
INSERT INTO CATEGORIA VALUES(3,'CIENCIAS EXACTAS');
INSERT INTO CATEGORIA VALUES(4,'ECONOM?A Y FINANZAS');
INSERT INTO CATEGORIA VALUES(5,'FICCI?N');
INSERT INTO CATEGORIA VALUES(6,'THRILLER');
INSERT INTO CATEGORIA VALUES(7,'BIOGRAFIAS');
INSERT INTO CATEGORIA VALUES(8,'HISTORIA');
INSERT INTO CATEGORIA VALUES(9,'INFANTILES');
INSERT INTO CATEGORIA VALUES(10,'UTOPIAS');
INSERT INTO CATEGORIA VALUES(11,'DRAMA');
/
INSERT INTO USUARIO VALUES (18575620,'FELIPE','TAPIA','1234');
/
INSERT INTO PRODUCTO VALUES (1,'EL MITO DE S?SIFO',10000,1,20,18575620);
INSERT INTO PRODUCTO VALUES (2,'EL ARTE DE LA GUERRA',11000,2,15,18575620);
INSERT INTO PRODUCTO VALUES (3,'AGUJEROS NEGROS Y TIEMPO CURVO',35000,3,12,18575620);
INSERT INTO PRODUCTO VALUES (4,'LIGHTS OUT',20000,5,4,18575620);
INSERT INTO PRODUCTO VALUES (5,'HARRY POTTER Y LA ORDEN DE FENIX',50000,5,80,18575620);
INSERT INTO PRODUCTO VALUES (6,'EL VISITANTE',60000,6,80,18575620);
INSERT INTO PRODUCTO VALUES (7,'BREVE HISTORIA DE MI VIDA',35000,7,80,18575620);
INSERT INTO PRODUCTO VALUES (8,'MOMENTOS ESTELARES DE LA HUMANIDAD',15000,8,80,18575620);
INSERT INTO PRODUCTO VALUES (9,'EL PRINCIPITO',5000,9,80,18575620);
INSERT INTO PRODUCTO VALUES (10,'1984',15000,10,80,18575620);
INSERT INTO PRODUCTO VALUES (11,'INDIGNO DE SER HUMANO',10000,11,80,18575620);

INSERT INTO METODO_PAGO VALUES (1, 'TARJETA DE CREDITO');
INSERT INTO METODO_PAGO VALUES (2, 'TARJETA DE CREDITO');
INSERT INTO METODO_PAGO VALUES (3, 'TRANSFERENCIA BANCARIA');
INSERT INTO METODO_PAGO VALUES (4, 'PAYPAL');
INSERT INTO METODO_PAGO VALUES (5, 'CRYPTOMONEDA');
COMMIT;
/
SET SERVEROUTPUT ON;
/
-- Crear funci?n para realizar un pedido
CREATE OR REPLACE PROCEDURE REALIZAR_PEDIDO(
    RUT_U IN PEDIDO.RUT_USUARIO%TYPE,
    CODIGO_P IN PEDIDO.CODIGO_PRODUCTO%TYPE,
    CANTIDAD_P IN PEDIDO.CANTIDAD%TYPE,
    METODO_P IN PEDIDO.METODO_PAGO%TYPE,
    DIRECCION IN PEDIDO.DIRECCION_ENVIO%TYPE,
    RESULTADO OUT VARCHAR2,
    MENSAJE OUT VARCHAR2
)
IS
    STOCK_DISPONIBLE NUMBER;
BEGIN
    SELECT STOCK INTO STOCK_DISPONIBLE FROM PRODUCTO WHERE CODIGO = CODIGO_P;
    IF STOCK_DISPONIBLE >= CANTIDAD_P THEN
        INSERT INTO PEDIDO (CODIGO, RUT_USUARIO, CODIGO_PRODUCTO, CANTIDAD, METODO_PAGO, DIRECCION_ENVIO, FECHA_ESTIMADA, ESTADO)
        VALUES (PEDIDO_SEQ.NEXTVAL, RUT_U, CODIGO_P, CANTIDAD_P, METODO_P, DIRECCION, SYSDATE + 5, 'Pendiente');
        UPDATE PRODUCTO SET STOCK = STOCK - CANTIDAD_P WHERE CODIGO = CODIGO_P;
        RESULTADO := 'TRUE';
        MENSAJE := 'PEDIDO REALIZADO EXITOSAMENTE';
        COMMIT;
    ELSE
        RESULTADO := 'FALSE';
        MENSAJE := 'STOCK INSUFICIENTE';
    END IF;
EXCEPTION
    WHEN OTHERS THEN
        RESULTADO := 'FALSE';
        MENSAJE := 'ERROR NO CONTROLADO: ' || SQLERRM;
        ROLLBACK;
END;
/
-- Crear procedimiento para registrar encuesta de satisfacci?n
CREATE OR REPLACE PROCEDURE REGISTRAR_ENCUESTA(
    CODIGO_PEDIDO IN ENCUESTA.CODIGO_PEDIDO%TYPE,
    RATING IN ENCUESTA.RATING%TYPE,
    COMENTARIOS IN ENCUESTA.COMENTARIOS%TYPE,
    RESULTADO OUT VARCHAR2,
    MENSAJE OUT VARCHAR2
)
IS
BEGIN
    INSERT INTO ENCUESTA (CODIGO_PEDIDO, RATING, COMENTARIOS)
    VALUES (CODIGO_PEDIDO, RATING, COMENTARIOS);
    RESULTADO := 'TRUE';
    MENSAJE := 'ENCUESTA REGISTRADA EXITOSAMENTE';
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        RESULTADO := 'FALSE';
        MENSAJE := 'ERROR NO CONTROLADO: ' || SQLERRM;
        ROLLBACK;
END;
/
``` ```sql
-- Crear secuencia para pedidos
CREATE SEQUENCE PEDIDO_SEQ START WITH 1 INCREMENT BY 1;

--verificar pedido
--DECLARE
--    RESULTADO VARCHAR2(100);
  --  MENSAJE VARCHAR2(100);
BEGIN
 --   REALIZAR_PEDIDO(18575620, 1, 2, 1, 'asdasdasd', RESULTADO, MENSAJE);
  --  DBMS_OUTPUT.PUT_LINE('RESULTADO: ' || RESULTADO);
   -- DBMS_OUTPUT.PUT_LINE('MENSAJE: ' || MENSAJE);
--END;

--verificar encuesta
--DECLARE
  --  RESULTADO VARCHAR2(100);
    --MENSAJE VARCHAR2(100);
--BEGIN
  --  REGISTRAR_ENCUESTA(1, 5, 'Excelente servicio y atenci?n', RESULTADO, MENSAJE);
    --DBMS_OUTPUT.PUT_LINE('RESULTADO: ' || RESULTADO);
   -- DBMS_OUTPUT.PUT_LINE('MENSAJE: ' || MENSAJE);
--END;
/
CREATE SEQUENCE ENCUESTA_SEQ START WITH 1 INCREMENT BY 1;
;
--$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
CREATE OR REPLACE FUNCTION OBTENER_CONTRASENA(
    RUT_U IN USUARIO.RUT%TYPE
)RETURN VARCHAR2
IS
    CONTRASENA_ALMACENADA VARCHAR2(100);
BEGIN
    SELECT CONTRASENA INTO CONTRASENA_ALMACENADA
    FROM USUARIO 
    WHERE RUT = RUT_U;
    RETURN CONTRASENA_ALMACENADA;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RETURN 'FALSE';
    WHEN OTHERS THEN
        RETURN 'FALSE';
END;
/  
CREATE OR REPLACE FUNCTION VERIFICAR_USUARIO(
    RUT_U IN USUARIO.RUT%TYPE
)RETURN BOOLEAN
IS
    CONTADOR NUMBER;
BEGIN
    SELECT COUNT(*) INTO CONTADOR
    FROM USUARIO 
    WHERE RUT = RUT_U;
    IF CONTADOR > 0 THEN
        RETURN TRUE;
    ELSE
        RETURN FALSE;
    END IF;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RETURN FALSE;
    WHEN OTHERS THEN
        RETURN FALSE;
END;
/
CREATE OR REPLACE PROCEDURE INICIAR_SESION(
    RUT_USUARIO IN USUARIO.RUT%TYPE,
    CONTRASENA_USUARIO IN USUARIO.CONTRASENA%TYPE,
    RESULTADO OUT VARCHAR2,
    MENSAJE OUT VARCHAR2
)
IS
    CONTRASENA_ALMACENADA VARCHAR2(100);
BEGIN
    IF VERIFICAR_USUARIO(RUT_USUARIO) = TRUE THEN
        CONTRASENA_ALMACENADA := OBTENER_CONTRASENA(RUT_USUARIO);
        IF CONTRASENA_USUARIO = CONTRASENA_ALMACENADA THEN
            RESULTADO := 'TRUE';
            MENSAJE := 'HA INICIADO SESI?N EXITOSAMENTE';
        ELSE
            RESULTADO := 'FALSE';
            MENSAJE := 'LOS DATOS INGRESADOS SON INCORRECTOS';
        END IF;
    ELSE
        RESULTADO := 'FALSE';
        MENSAJE := 'LOS DATOS INGRESADOS SON INCORRECTOS';
    END IF;
EXCEPTION
    WHEN OTHERS THEN
        RESULTADO := 'FALSE';
        MENSAJE := 'ERROR INTERNO: '||SQLERRM;
END;
/* VERIFICACI?N DEL PROCEDIMIENTO INICIAR_SESION
DECLARE
    RESULTADO VARCHAR2(100);
    MENSAJE VARCHAR2(100);
BEGIN
    INICIAR_SESION(18575620,'87654',RESULTADO,MENSAJE);
    DBMS_OUTPUT.PUT_LINE('RESULTADO: '||RESULTADO);
    DBMS_OUTPUT.PUT_LINE('MENSAJE: '||MENSAJE);
END;
*/
/
CREATE OR REPLACE PROCEDURE INSERTAR_USUARIO(
    RUT_U IN USUARIO.RUT%TYPE,
    NOMBRE_U IN USUARIO.NOMBRE%TYPE,
    APELLIDOS_U IN USUARIO.APELLIDOS%TYPE,
    CONTRASENA_U IN USUARIO.CONTRASENA%TYPE,
    RESULTADO OUT VARCHAR2,
    MENSAJE OUT VARCHAR2
)
IS
    USUARIO_EXISTE EXCEPTION;
BEGIN
    LOCK TABLE USUARIO IN ROW EXCLUSIVE MODE;
    IF VERIFICAR_USUARIO(RUT_U) = TRUE THEN 
        RAISE USUARIO_EXISTE;
    ELSE
        INSERT INTO USUARIO VALUES (RUT_U, NOMBRE_U, APELLIDOS_U, CONTRASENA_U);
        COMMIT;
        RESULTADO := 'TRUE';
        MENSAJE := 'EL USUARIO SE HA INGRESADO EXITOSAMENTE';
    END IF;
EXCEPTION
    WHEN USUARIO_EXISTE THEN
        RESULTADO := 'FALSE';
        MENSAJE := 'EL USUARIO QUE INTENTA REGISTRAR YA EXISTE';
        ROLLBACK;
    WHEN OTHERS THEN
        RESULTADO := 'FALSE';
        MENSAJE := 'ERROR NO CONTROLADO: '||SQLERRM;
        ROLLBACK;
END;
/* VERIFICACI?N DEL PROCEDIMIENTO INSERTAR_USUARIO
DECLARE
    RESULTADO VARCHAR2(100);
    MENSAJE VARCHAR2(100);
BEGIN
    INSERTAR_USUARIO(18575620,'FELIPE','TAPIA','1234',RESULTADO,MENSAJE);
    DBMS_OUTPUT.PUT_LINE('RESULTADO: '||RESULTADO);
    DBMS_OUTPUT.PUT_LINE('MENSAJE: '||MENSAJE);
END;

SELECT * FROM USUARIO;
*/
/
CREATE OR REPLACE FUNCTION VERIFICAR_PRODUCTO(
    CODIGO_P IN PRODUCTO.CODIGO%TYPE
)RETURN BOOLEAN
IS
    CONTADOR NUMBER;
BEGIN
    SELECT COUNT(*) INTO CONTADOR
    FROM PRODUCTO
    WHERE CODIGO = CODIGO_P;
    IF CONTADOR > 0 THEN
        RETURN TRUE;
    ELSE
        RETURN FALSE;
    END IF;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RETURN FALSE;
    WHEN OTHERS THEN
        RETURN FALSE;
END;
/
CREATE OR REPLACE PROCEDURE INSERTAR_PRODUCTO(
    CODIGO_P IN PRODUCTO.CODIGO%TYPE,
    NOMBRE_P IN PRODUCTO.NOMBRE%TYPE,
    PRECIO_P IN PRODUCTO.PRECIO%TYPE,
    CATEGORIA_P IN PRODUCTO.CODIGO_CATEGORIA%TYPE,
    STOCK_P IN PRODUCTO.STOCK%TYPE,
    RUT_U IN PRODUCTO.RUT_USUARIO%TYPE,
    RESULTADO OUT VARCHAR2,
    MENSAJE OUT VARCHAR2
)
IS
    STOCK_INCORRECTO EXCEPTION;
    PRECIO_INCORRECTO EXCEPTION;
    USUARIO_NO_EXISTE EXCEPTION;
    PRODUCTO_YA_EXISTE EXCEPTION;
BEGIN
    LOCK TABLE PRODUCTO IN ROW EXCLUSIVE MODE;
    IF PRECIO_P > 0 THEN
        IF STOCK_P > 0 THEN
            IF VERIFICAR_USUARIO(RUT_U) = TRUE THEN
                IF VERIFICAR_PRODUCTO(CODIGO_P) = FALSE THEN
                    INSERT INTO PRODUCTO VALUES(CODIGO_P,NOMBRE_P,PRECIO_P,CATEGORIA_P,STOCK_P,RUT_U);
                    RESULTADO := 'TRUE';
                    MENSAJE := 'EL PRODUCTO SE HA INGRESADO EXITOSAMENTE';
                    COMMIT;
                ELSE
                    RAISE PRODUCTO_YA_EXISTE;
                END IF;
            ELSE
                RAISE USUARIO_NO_EXISTE;
            END IF;
        ELSE
            RAISE STOCK_INCORRECTO;
        END IF;
    ELSE
        RAISE PRECIO_INCORRECTO;
    END IF;
    EXCEPTION
        WHEN PRODUCTO_YA_EXISTE THEN    
            RESULTADO := 'FALSE';
            MENSAJE := 'EL PRODUCTO QUE INTENTA INGRESAR YA FUE INGRESADO POR OTRO USUARIO';
            ROLLBACK;
        WHEN USUARIO_NO_EXISTE THEN
            RESULTADO := 'FALSE';
            MENSAJE := 'EL USUARIO QUE INTENTA INGRESAR ESTE PRODUCTO NO EXISTE';
            ROLLBACK;
        WHEN STOCK_INCORRECTO THEN
            RESULTADO := 'FALSE';
            MENSAJE := 'EL STOCK DEBE TENER UN VALOR MAYOR A 0';
            ROLLBACK;
        WHEN PRECIO_INCORRECTO THEN
            RESULTADO := 'FALSE';
            MENSAJE := 'EL PRECIO DEBE TENER UN VALOR MAYOR A 0';
            ROLLBACK;
        WHEN OTHERS THEN
            RESULTADO := 'FALSE';
            MENSAJE := 'ERROR NO CONTROLADO: '||SQLERRM;
            ROLLBACK;
END;
/* VERIFICACI?N DEL PROCEDIMIENTO INSERTAR_PRODUCTO
DECLARE
    RESULTADO VARCHAR2(100);
    MENSAJE VARCHAR2(100);
BEGIN
    INSERTAR_PRODUCTO(5,'MONITOR 17" AOC',67990,4,80,18575620,RESULTADO,MENSAJE);
    DBMS_OUTPUT.PUT_LINE('RESULTADO: '||RESULTADO);
    DBMS_OUTPUT.PUT_LINE('MENSAJE: '||MENSAJE);
END;

SELECT * FROM PRODUCTO;
*/
CREATE OR REPLACE FUNCTION VERIFICAR_PRODUCTO_MODIFICAR(
    CODIGO_P IN PRODUCTO.CODIGO%TYPE,
    RUT_P IN PRODUCTO.RUT_USUARIO%TYPE
)RETURN BOOLEAN
IS
    CONTADOR NUMBER;
BEGIN
    SELECT COUNT(*) INTO CONTADOR
    FROM PRODUCTO
    WHERE CODIGO = CODIGO_P AND RUT_USUARIO = RUT_P;
    IF CONTADOR > 0 THEN
        RETURN TRUE;
    ELSE
        RETURN FALSE;
    END IF;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RETURN FALSE;
    WHEN OTHERS THEN
        RETURN FALSE;
END;
/
CREATE OR REPLACE PROCEDURE MODIFICAR_PRODUCTO(
    CODIGO_P IN PRODUCTO.CODIGO%TYPE,
    NOMBRE_P IN PRODUCTO.NOMBRE%TYPE,
    PRECIO_P IN PRODUCTO.PRECIO%TYPE,
    STOCK_P IN PRODUCTO.STOCK%TYPE,
    RUT_U IN PRODUCTO.RUT_USUARIO%TYPE,
    RESULTADO OUT VARCHAR2,
    MENSAJE OUT VARCHAR2
)
IS
    STOCK_INCORRECTO EXCEPTION;
    PRECIO_INCORRECTO EXCEPTION;
    USUARIO_NO_EXISTE EXCEPTION;
    PRODUCTO_NO_CORRESPONDE EXCEPTION;
BEGIN
    LOCK TABLE PRODUCTO IN ROW EXCLUSIVE MODE;
    IF PRECIO_P > 0 THEN
        IF STOCK_P > 0 THEN
            IF VERIFICAR_USUARIO(RUT_U) = TRUE THEN
                IF VERIFICAR_PRODUCTO_MODIFICAR(CODIGO_P, RUT_U) = TRUE THEN
                    UPDATE PRODUCTO 
                    SET NOMBRE = NOMBRE_P, PRECIO = PRECIO_P, STOCK = STOCK_P
                    WHERE CODIGO = CODIGO_P AND RUT_USUARIO = RUT_U;
                    RESULTADO := 'TRUE';
                    MENSAJE := 'EL PRODUCTO SE HA MODIFICADO EXITOSAMENTE';
                    COMMIT;
                ELSE
                    RAISE PRODUCTO_NO_CORRESPONDE;
                END IF;
            ELSE
                RAISE USUARIO_NO_EXISTE;
            END IF;
        ELSE
            RAISE STOCK_INCORRECTO;
        END IF;
    ELSE
        RAISE PRECIO_INCORRECTO;
    END IF;
    EXCEPTION
        WHEN PRODUCTO_NO_CORRESPONDE THEN    
            RESULTADO := 'FALSE';
            MENSAJE := 'EL PRODUCTO QUE INTENTA MODIFICAR CORRESPONDE A OTRO USUARIO';
            ROLLBACK;
        WHEN USUARIO_NO_EXISTE THEN
            RESULTADO := 'FALSE';
            MENSAJE := 'EL USUARIO QUE INTENTA MODIFICAR ESTE PRODUCTO NO EXISTE';
            ROLLBACK;
        WHEN STOCK_INCORRECTO THEN
            RESULTADO := 'FALSE';
            MENSAJE := 'EL STOCK DEBE TENER UN VALOR MAYOR A 0';
            ROLLBACK;
        WHEN PRECIO_INCORRECTO THEN
            RESULTADO := 'FALSE';
            MENSAJE := 'EL PRECIO DEBE TENER UN VALOR MAYOR A 0';
            ROLLBACK;
        WHEN OTHERS THEN
            RESULTADO := 'FALSE';
            MENSAJE := 'ERROR NO CONTROLADO: '||SQLERRM;
            ROLLBACK;
END;
/* VERIFICACI?N DEL PROCEDIMIENTO MODIFICAR_PRODUCTO
DECLARE
    RESULTADO VARCHAR2(100);
    MENSAJE VARCHAR2(100);
BEGIN
    MODIFICAR_PRODUCTO(5,'HARRY POTTER Y LA ORDEN DE FENIX',50000,5,80,18575620);
    DBMS_OUTPUT.PUT_LINE('RESULTADO: '||RESULTADO);
    DBMS_OUTPUT.PUT_LINE('MENSAJE: '||MENSAJE);
END;

SELECT * FROM PRODUCTO;
*/
/
CREATE OR REPLACE PROCEDURE ELIMINAR_PRODUCTO(
    CODIGO_P IN PRODUCTO.CODIGO%TYPE,
    RUT_U IN PRODUCTO.RUT_USUARIO%TYPE,
    RESULTADO OUT VARCHAR2,
    MENSAJE OUT VARCHAR2
)
IS
    PRODUCTO_NO_CORRESPONDE EXCEPTION;
    USUARIO_NO_EXISTE EXCEPTION;
BEGIN
    LOCK TABLE PRODUCTO IN ROW EXCLUSIVE MODE;
     IF VERIFICAR_USUARIO(RUT_U) = TRUE THEN
        IF VERIFICAR_PRODUCTO_MODIFICAR(CODIGO_P, RUT_U) = TRUE THEN
            DELETE FROM PRODUCTO
            WHERE CODIGO = CODIGO_P AND RUT_USUARIO = RUT_U;
            RESULTADO := 'TRUE';
            MENSAJE := 'EL PRODUCTO SE HA ELIMINADO EXITOSAMENTE';
            COMMIT;
        ELSE
            RAISE PRODUCTO_NO_CORRESPONDE;
        END IF;
    ELSE
        RAISE USUARIO_NO_EXISTE;
    END IF;
    EXCEPTION
        WHEN PRODUCTO_NO_CORRESPONDE THEN    
            RESULTADO := 'FALSE';
            MENSAJE := 'EL PRODUCTO QUE INTENTA ELIMINAR CORRESPONDE A OTRO USUARIO';
            ROLLBACK;
        WHEN USUARIO_NO_EXISTE THEN
            RESULTADO := 'FALSE';
            MENSAJE := 'EL USUARIO QUE INTENTA ELIMINAR ESTE PRODUCTO NO EXISTE';
            ROLLBACK;
        WHEN OTHERS THEN
            RESULTADO := 'FALSE';
            MENSAJE := 'ERROR NO CONTROLADO: '||SQLERRM;
            ROLLBACK;           
END;
/* VERIFICACI?N DEL PROCEDIMIENTO ELIMINAR_PRODUCTO
DECLARE
    RESULTADO VARCHAR2(100);
    MENSAJE VARCHAR2(100);
BEGIN
    ELIMINAR_PRODUCTO(5,18575620,RESULTADO,MENSAJE);
    ELIMINAR_PRODUCTO(8,18575620,RESULTADO,MENSAJE);
    ELIMINAR_PRODUCTO(3,18575620,RESULTADO,MENSAJE);
    ELIMINAR_PRODUCTO(2,18575620,RESULTADO,MENSAJE);
    ELIMINAR_PRODUCTO(1,18575620,RESULTADO,MENSAJE);
    DBMS_OUTPUT.PUT_LINE('RESULTADO: '||RESULTADO);
    DBMS_OUTPUT.PUT_LINE('MENSAJE: '||MENSAJE);
END;

SELECT * FROM PRODUCTO;
*/
/
CREATE OR REPLACE TRIGGER MAYUSCULA_PRODUCTO
BEFORE INSERT ON PRODUCTO
FOR EACH ROW
DECLARE
    --DECLARACION VARIABLES
BEGIN
    :NEW.NOMBRE := UPPER(:NEW.NOMBRE);
END;
/
CREATE OR REPLACE TRIGGER MAYUSCULA_USUARIO
BEFORE INSERT ON USUARIO
FOR EACH ROW
DECLARE
    --DECLARACION VARIABLES
BEGIN
    :NEW.NOMBRE := UPPER(:NEW.NOMBRE);
    :NEW.APELLIDOS := UPPER(:NEW.APELLIDOS);
END;